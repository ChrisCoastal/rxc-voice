import React, { useContext, useEffect, useState } from "react";
import { WebService } from "../../services";
import moment from "moment";
import { ActionContext, StateContext } from "../../hooks";
import { BgColor } from "../../models/BgColor";

import "./GiveCreditsPage.scss";
import { Process } from "../../models/Process";

function GiveCreditsPage() {
    const { setColor, fetchProcesses, selectProcess } = useContext(ActionContext);
    const { stagedTransfer, activeProcesses } = useContext(StateContext);
    const [recipientEmail, setRecipientEmail] = useState("");
    const [amount, setAmount] = useState("");
    const [process, setProcess] = useState("");

    const getProcess = (transferData: any) => {
      if (transferData) {
        return transferData.process;
      } else {
        return null;
      }
    };

    const getRecipient = (transferData: any) => {
      if (transferData) {
        return transferData.recipient;
      } else {
        return null;
      }
    };
    // 
    // const getDelegates = (process: Process | null) => {
    //   if (process) {
    //     return process.delegates;
    //   } else {
    //     return undefined;
    //   }
    // };

    useEffect(() => {
      setColor(BgColor.White)

      fetchProcesses();

      if (stagedTransfer) {
        if (getRecipient(stagedTransfer)) {
          setRecipientEmail(recipientEmail => getRecipient(stagedTransfer));
        }
        if (getProcess(stagedTransfer)) {
          setProcess(process => getProcess(stagedTransfer).id);
        }
      }

     // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // TODO: use fetchDelegates to get delegates and transfer if already exists.

    const submit = () => {
      if (recipientEmail && amount) {

        selectProcess(process);
        // check if recipient is already a delegate
        // const recipientDelegate = getDelegates(selectedProcess)?.find((delegate => delegate.user.email === recipientEmail))
        // if (recipientDelegate) {
        //
        // }

        WebService.postDelegates({
          user: {
            // not secure but this password doesn't have to be.
            password: Math.random().toString(36).substr(2, 8),
            email: recipientEmail,
          },
          is_autogenerated: true,
          invited_by: WebService.userobj.id
        }).subscribe(async (data) => {
          if (data.ok) {
            const recipient = await data.json();
            WebService.postTransfer({
              sender: WebService.userobj.id,
              recipient: recipient.id,
              amount: amount,
              date: moment().toISOString(),
              process: process,
            }, recipient.id).subscribe(async (data) => {
              if (data.ok) {
                // TODO: stuff here on transfer completion
              } else {
                const error = await data.json();
                console.log(error);
              }
            });
          } else {
            const error = await data.json();
            console.log(error);
          }
        });
      }
    };

    return (
        <div className="give-credits-page">
          <h1 className="title">give credits</h1>
          <input
            type="number"
            placeholder="0"
            className="amount-field"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
          />

          <input
            type="email"
            placeholder="example@mail.com"
            className="recipient-field"
            value={recipientEmail}
            onChange={(e) => setRecipientEmail(e.target.value)}
          />
          <select
            name="process"
            className="select-process"
            onChange={(e) => setProcess(process => e.target.value)}
          >
            {activeProcesses.map((process: Process) => (
              <option value={process.id} key={process.id}>{process.title}</option>
            ))}
          </select>

          <button
            type="button"
            className="submit-button"
            onClick={() => submit()}
            >
            submit
          </button>

        </div>
    );
}

export default GiveCreditsPage;
