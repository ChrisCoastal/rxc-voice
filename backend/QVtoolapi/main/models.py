from django.db import models
from django.contrib.auth.models import (AbstractUser, Group)
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.validators import UnicodeUsernameValidator


class CustomGroup(Group):
    autogenerated = models.BooleanField(default=False, blank=True)

    def __str__(self):
        return self.name


class User(AbstractUser):
    username_validator = UnicodeUsernameValidator()

    id = models.AutoField(primary_key=True)
    username = models.CharField(
        _('username'),
        max_length=150,
        unique=True,
        validators=[username_validator],
        error_messages={
            'unique': _("A user with that username already exists."),
        },
        blank=True,
        editable=False,
    )
    email = models.EmailField(
        verbose_name='email address',
        max_length=255,
        )
    is_staff = models.BooleanField(default=False, blank=True)
    is_superuser = models.BooleanField(default=False, blank=True)
    # Represented by path
    profile_pic = models.TextField(null=True)
    # encrypted
    phone_number = models.CharField(max_length=20, blank=True)
    oauth_uuid = models.CharField(max_length=256, null=True)
    # When a user deletes their account, their user object is not deleted.
    # "is_active" field is set to 'False'.
    invited_by = models.ForeignKey(
        'self', null=True, on_delete=models.SET_NULL)
    credit_balance = models.DecimalField(
        default=0, blank=True, max_digits=6, decimal_places=0)
    groups = models.ManyToManyField(
        CustomGroup,
        verbose_name=_('groups'),
        blank=True,
        help_text=_(
            'The groups this user belongs to. A user will get all permissions '
            'granted to each of their groups.'
        ),
        related_name="user_set",
        related_query_name="user",
    )

    def __str__(self):
        return self.email


class Election(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=256, blank=False)
    description = models.TextField(blank=True)
    start_date = models.DateTimeField(blank=False)
    end_date = models.DateTimeField(blank=False)
    negative_votes = models.BooleanField(default=True)
    matching_fund = models.DecimalField(
        default=0, max_digits=10, decimal_places=0, blank=True)
    # What icon should be used to represent voice credits. Represented by path.
    vote_token = models.TextField(
        blank=False, default='../../../frontend/public/black-square.png')
    # Number of voice credits each voter will start out with.
    num_tokens = models.DecimalField(
        default=99, blank=False, max_digits=4, decimal_places=0)
    groups = models.ManyToManyField(CustomGroup, blank=True, default=[])

    class Meta:
        permissions = [
            ("can_vote", "Can vote"),
            ("can_view_results", "Can view results"),
        ]


class Proposal(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=256, blank=False)
    description = models.TextField(blank=True)
    link = models.CharField(max_length=512, blank=True)
    election = models.ForeignKey(Election, on_delete=models.CASCADE,
                                 null=True, blank=False)
    sum_contributions = models.DecimalField(
        default=0, max_digits=10, decimal_places=0, editable=False)
    current_match = models.DecimalField(
        default=0, max_digits=10, decimal_places=0, editable=False)
    num_contributors = models.DecimalField(
        default=0, max_digits=10, decimal_places=0, editable=False)


class Vote(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    # When a user deletes their account, their user object is not deleted.
    # "is_active" field is set to 'False'.
    sender = models.ForeignKey(User, null=True, on_delete=models.SET_NULL)
    proposal = models.ForeignKey(Proposal, on_delete=models.SET_NULL,
                                 null=True, blank=False)
    amount = models.DecimalField(
        default=0, max_digits=4, decimal_places=0)
    date = models.DateTimeField(null=True)
